{"version":3,"sources":["components/MainPage/SubredditChoice.jsx","components/MainPage/ImagesList/EachImage.jsx","components/MainPage/ImagesList.jsx","shared/Loader.jsx","components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["SubredditChoice","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","subreddit","_updateSubreddit","bind","assertThisInitialized","_sendSubreddit","event","setState","target","value","preventDefault","sendSubreddit","props","react_default","a","createElement","id","className","type","onChange","placeholder","onClick","Component","EachImage","voting","item","data","ups","downs","rel","href","concat","permalink","alt","src","url","title","ImagesList","scrolledFromTop","_scrollToTop","_this2","window","onscroll","scrollY","scroll","top","behavior","posts","map","index","ImagesList_EachImage","key","Loader","class","MainPage","loading","_fetchApi","_saveSubreddit","fetchedPosts","nextUrl","requestsCounter","fetchImages","fetchUrl","fetchNextUrl","fetch","then","res","json","children","forEach","element","match","length","push","after","alert","catch","err","that","_this$state","MainPage_SubredditChoice","shared_Loader","MainPage_ImagesList","App","components_MainPage","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d84f770.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SubredditChoice extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      subreddit: \"\"\r\n    };\r\n\r\n    this._updateSubreddit = this._updateSubreddit.bind(this);\r\n    this._sendSubreddit = this._sendSubreddit.bind(this);\r\n  }\r\n\r\n  _updateSubreddit(event) {\r\n    this.setState({\r\n      subreddit: event.target.value\r\n    });\r\n  }\r\n\r\n  _sendSubreddit(event) {\r\n    event.preventDefault();\r\n\r\n    const { sendSubreddit } = this.props;\r\n\r\n    sendSubreddit(this.state.subreddit);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section id=\"subreddit-choice\" className=\"container\">\r\n        <div className=\"sub-choice\">\r\n          <header className=\"sub-choice__header\">\r\n            Welcome to Reddit Image Viewer\r\n          </header>\r\n          <p className=\"sub-choice__instruction\">\r\n            Feel free to type your favorite subreddit below\r\n          </p>\r\n          <form className=\"choice-form\">\r\n            <input\r\n              className=\"choice-form__input\"\r\n              type=\"text\"\r\n              value={this.state.subreddit}\r\n              onChange={this._updateSubreddit}\r\n              placeholder=\"e.g. funny\"\r\n            />\r\n            <button\r\n              className=\"choice-form__submit\"\r\n              type=\"submit\"\r\n              onClick={this._sendSubreddit}\r\n            >\r\n              Find images!\r\n            </button>\r\n          </form>\r\n          <span className=\"sub-choice__note\">\r\n            Please keep in mind, that some of the subreddits contain few or none\r\n            images.\r\n          </span>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubredditChoice;\r\n","import React, { Component } from \"react\";\r\n\r\nclass EachImage extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      voting: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { item } = this.props;\r\n\r\n    this.setState({\r\n      voting: item.data.ups - item.data.downs\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { item } = this.props;\r\n\r\n    const { voting } = this.state;\r\n\r\n    return (\r\n      <div className=\"eachImage\">\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.reddit.com${item.data.permalink}`}>\r\n          <img className=\"eachImage__image\" alt=\"\" src={item.data.url} />\r\n        </a>\r\n        <p className=\"eachImage__title\">{item.data.title}</p>\r\n        <div className=\"voting\">\r\n          {voting >= 0 ? (\r\n            <span className=\"voting__up\">\r\n              {voting > 0 && \"+\"}\r\n              {this.state.voting}\r\n            </span>\r\n          ) : (\r\n            <span className=\"voting__down\">-{this.state.voting}</span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EachImage;\r\n","import React, { Component } from \"react\";\r\n\r\nimport EachImage from \"./ImagesList/EachImage\";\r\n\r\nclass ImagesList extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      scrolledFromTop: 0\r\n    };\r\n\r\n    this._scrollToTop = this._scrollToTop.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.onscroll = () => {\r\n      this.setState({\r\n        scrolledFromTop: window.scrollY\r\n      });\r\n    };\r\n  }\r\n\r\n  _scrollToTop() {\r\n    window.scroll({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n\r\n    const { scrolledFromTop } = this.state;\r\n\r\n    return (\r\n      <section id=\"images-list\" className=\"imagesList\">\r\n        {posts.map((item, index) => {\r\n          return <EachImage key={index} item={item} />;\r\n        })}\r\n        {scrolledFromTop > 200 && (\r\n          <button className=\"imagesList__scrolltop\" onClick={this._scrollToTop}>\r\n            Up!\r\n          </button>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImagesList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Loader extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loader\">\r\n        <div class=\"lds-ellipsis\">\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\n\r\nimport SubredditChoice from \"./MainPage/SubredditChoice\";\r\nimport ImagesList from \"./MainPage/ImagesList\";\r\nimport Loader from \"../shared/Loader\";\r\n\r\nclass MainPage extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      posts: [],\r\n      subreddit: \"\",\r\n      loading: false\r\n    };\r\n\r\n    this._fetchApi = this._fetchApi.bind(this);\r\n    this._saveSubreddit = this._saveSubreddit.bind(this);\r\n  }\r\n\r\n  _fetchApi() {\r\n    const { subreddit } = this.state;\r\n\r\n    this.setState({\r\n      posts: [],\r\n      loading: true\r\n    });\r\n\r\n    let fetchedPosts = [];\r\n    let nextUrl = \"\";\r\n    let requestsCounter = 0;\r\n\r\n    let fetchImages = () => {\r\n      let fetchUrl = `https://www.reddit.com/r/${subreddit}/new/.json?limit=100`;\r\n      let fetchNextUrl = `https://www.reddit.com/r/${subreddit}/new/.json?after=${nextUrl}&limit=100/`;\r\n      fetch(nextUrl ? fetchNextUrl : fetchUrl)\r\n        .then(res => {\r\n          return res.json();\r\n        })\r\n        .then(res => {\r\n          res.data.children.forEach(element => {\r\n            if (\r\n              element.data.url.match(/\\.(jpeg|jpg|gif|png)$/) != null &&\r\n              fetchedPosts.length < 50\r\n            ) {\r\n              fetchedPosts.push(element);\r\n            }\r\n          });\r\n\r\n          this.setState({\r\n            posts: fetchedPosts\r\n          });\r\n\r\n          if (\r\n            fetchedPosts.length < 50 &&\r\n            res.data.after &&\r\n            requestsCounter < 15\r\n          ) {\r\n            nextUrl = res.data.after;\r\n            requestsCounter++;\r\n            fetchImages();\r\n          } else if (fetchedPosts.length === 0) {\r\n            alert(\"No results, please try another subreddit.\");\r\n            this.setState({\r\n              loading: false\r\n            });\r\n          } else {\r\n            nextUrl = \"\";\r\n            this.setState({\r\n              loading: false\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          alert(`Something went wrong`, err);\r\n          this.setState({\r\n            loading: false\r\n          });\r\n        });\r\n    };\r\n\r\n    fetchImages();\r\n  }\r\n\r\n  _saveSubreddit(value) {\r\n    let that = this;\r\n\r\n    this.setState(\r\n      {\r\n        subreddit: value\r\n      },\r\n      () => {\r\n        that._fetchApi();\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { posts, loading } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <SubredditChoice sendSubreddit={this._saveSubreddit} />\r\n        {loading ? <Loader /> : <ImagesList posts={posts} />}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport MainPage from './components/MainPage';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <MainPage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}